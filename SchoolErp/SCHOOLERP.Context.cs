//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolErp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SCHOOLERPEntities : DbContext
    {
        public SCHOOLERPEntities()
            : base("name=SCHOOLERPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAcademicYear> tblAcademicYears { get; set; }
        public virtual DbSet<tblCastCategory> tblCastCategories { get; set; }
        public virtual DbSet<tblCaste> tblCastes { get; set; }
        public virtual DbSet<tblClass> tblClasses { get; set; }
        public virtual DbSet<tblClassTeacherAllocation> tblClassTeacherAllocations { get; set; }
        public virtual DbSet<tblClassTiming> tblClassTimings { get; set; }
        public virtual DbSet<tblCountry> tblCountries { get; set; }
        public virtual DbSet<tblCours> tblCourses { get; set; }
        public virtual DbSet<tblDepartmnet> tblDepartmnets { get; set; }
        public virtual DbSet<tblDesignation> tblDesignations { get; set; }
        public virtual DbSet<tblDocumentNo> tblDocumentNoes { get; set; }
        public virtual DbSet<tblEmployeeAccountInformation> tblEmployeeAccountInformations { get; set; }
        public virtual DbSet<tblEmployeeAttendence> tblEmployeeAttendences { get; set; }
        public virtual DbSet<tblemployeeLeaveRequest> tblemployeeLeaveRequests { get; set; }
        public virtual DbSet<tblEmployeeSalaryDetail> tblEmployeeSalaryDetails { get; set; }
        public virtual DbSet<tblEmployyeMonthSalaryStructure> tblEmployyeMonthSalaryStructures { get; set; }
        public virtual DbSet<tblEventDetail> tblEventDetails { get; set; }
        public virtual DbSet<tblEventType> tblEventTypes { get; set; }
        public virtual DbSet<tblExPayeeDetail> tblExPayeeDetails { get; set; }
        public virtual DbSet<tblExpenseCategory> tblExpenseCategories { get; set; }
        public virtual DbSet<tblFeeCalculate> tblFeeCalculates { get; set; }
        public virtual DbSet<tblFeeStructure> tblFeeStructures { get; set; }
        public virtual DbSet<tblFeeStructureAssign> tblFeeStructureAssigns { get; set; }
        public virtual DbSet<tblFeeStructureClass> tblFeeStructureClasses { get; set; }
        public virtual DbSet<tblGender> tblGenders { get; set; }
        public virtual DbSet<tblGradeAssignSalaryHead> tblGradeAssignSalaryHeads { get; set; }
        public virtual DbSet<tblHomeAssignment> tblHomeAssignments { get; set; }
        public virtual DbSet<TBLLanguage> TBLLanguages { get; set; }
        public virtual DbSet<tblLeaveDetail> tblLeaveDetails { get; set; }
        public virtual DbSet<tblLeaveType> tblLeaveTypes { get; set; }
        public virtual DbSet<tblMasterGrade> tblMasterGrades { get; set; }
        public virtual DbSet<tblModule> tblModules { get; set; }
        public virtual DbSet<tblNoticeBoard> tblNoticeBoards { get; set; }
        public virtual DbSet<TBLPrevSchoolDet> TBLPrevSchoolDets { get; set; }
        public virtual DbSet<tblQualification> tblQualifications { get; set; }
        public virtual DbSet<tblReligion> tblReligions { get; set; }
        public virtual DbSet<tblRoleAssign> tblRoleAssigns { get; set; }
        public virtual DbSet<tblRoleMaster> tblRoleMasters { get; set; }
        public virtual DbSet<tblRoleSubModAssign> tblRoleSubModAssigns { get; set; }
        public virtual DbSet<tblRoteDestination> tblRoteDestinations { get; set; }
        public virtual DbSet<tblSalaryHead> tblSalaryHeads { get; set; }
        public virtual DbSet<tblScholarRegister> tblScholarRegisters { get; set; }
        public virtual DbSet<tblScholarRegisterDetail> tblScholarRegisterDetails { get; set; }
        public virtual DbSet<tblSection> tblSections { get; set; }
        public virtual DbSet<tblStaffCategory> tblStaffCategories { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblStatu> tblStatus { get; set; }
        public virtual DbSet<tblStream> tblStreams { get; set; }
        public virtual DbSet<tblStRegDoc> tblStRegDocs { get; set; }
        public virtual DbSet<tblStRegHealthDet> tblStRegHealthDets { get; set; }
        public virtual DbSet<tblStRegistration> tblStRegistrations { get; set; }
        public virtual DbSet<tblStRegPrevSchoolDet> tblStRegPrevSchoolDets { get; set; }
        public virtual DbSet<TBLStudent> TBLStudents { get; set; }
        public virtual DbSet<tblStudentAttendence> tblStudentAttendences { get; set; }
        public virtual DbSet<TBLStudentDoc> TBLStudentDocs { get; set; }
        public virtual DbSet<TBLStudentHealthDet> TBLStudentHealthDets { get; set; }
        public virtual DbSet<tblStudentLeaveApply> tblStudentLeaveApplies { get; set; }
        public virtual DbSet<tblSubject> tblSubjects { get; set; }
        public virtual DbSet<tblSubjectTeacherAllocate> tblSubjectTeacherAllocates { get; set; }
        public virtual DbSet<tblSubModule> tblSubModules { get; set; }
        public virtual DbSet<tblTaskDetail> tblTaskDetails { get; set; }
        public virtual DbSet<tblTaskToDo> tblTaskToDoes { get; set; }
        public virtual DbSet<tblTaskToDoForEmployee> tblTaskToDoForEmployees { get; set; }
        public virtual DbSet<tblTeacherDiary> tblTeacherDiaries { get; set; }
        public virtual DbSet<tblThoughtsOfDay> tblThoughtsOfDays { get; set; }
        public virtual DbSet<tblTimeTable> tblTimeTables { get; set; }
        public virtual DbSet<tblTimeTableConfig> tblTimeTableConfigs { get; set; }
        public virtual DbSet<tblTransExPayeeDetail> tblTransExPayeeDetails { get; set; }
        public virtual DbSet<tblTransportAllocation> tblTransportAllocations { get; set; }
        public virtual DbSet<tblTransportDriver> tblTransportDrivers { get; set; }
        public virtual DbSet<tblTransportVehicalDetail> tblTransportVehicalDetails { get; set; }
        public virtual DbSet<tblTransRoute> tblTransRoutes { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblWeekDay> tblWeekDays { get; set; }
        public virtual DbSet<tblAdvertisingVedio> tblAdvertisingVedios { get; set; }
        public virtual DbSet<tblCity> tblCities { get; set; }
        public virtual DbSet<tblDocument> tblDocuments { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblEmployeeDocument> tblEmployeeDocuments { get; set; }
        public virtual DbSet<tblMaritalStatu> tblMaritalStatus { get; set; }
        public virtual DbSet<tblUserType> tblUserTypes { get; set; }
        public virtual DbSet<tblSchoolDetail> tblSchoolDetails { get; set; }
        public virtual DbSet<tblAuthentication> tblAuthentications { get; set; }
        public virtual DbSet<licence_details> licence_details { get; set; }
        public virtual DbSet<tblSyllabu> tblSyllabus { get; set; }
        public virtual DbSet<tblnewtimetable> tblnewtimetables { get; set; }
        public virtual DbSet<tblHoliday> tblHolidays { get; set; }
        public virtual DbSet<tblGalleryImage> tblGalleryImages { get; set; }
        public virtual DbSet<tblGpsDeviceRecord> tblGpsDeviceRecords { get; set; }
        public virtual DbSet<tblHubDetail> tblHubDetails { get; set; }
        public virtual DbSet<tblSuperAdminModule> tblSuperAdminModules { get; set; }
        public virtual DbSet<tblSuperAdminSubModule> tblSuperAdminSubModules { get; set; }
        public virtual DbSet<tblAttendenceMachineMaster> tblAttendenceMachineMasters { get; set; }
        public virtual DbSet<Tran_MachineRawPunch> Tran_MachineRawPunch { get; set; }
        public virtual DbSet<tblSchoolSm> tblSchoolSms { get; set; }
        public virtual DbSet<tblStudentdetailsClassToClass> tblStudentdetailsClassToClasses { get; set; }
        public virtual DbSet<tblTransportVehicalsDetail> tblTransportVehicalsDetails { get; set; }
        public virtual DbSet<tblFeeCategory> tblFeeCategories { get; set; }
        public virtual DbSet<tblFeeStructureConfig> tblFeeStructureConfigs { get; set; }
        public virtual DbSet<tblFeeHead> tblFeeHead { get; set; }
        public virtual DbSet<tblFeeStructureConfig2> tblFeeStructureConfig2 { get; set; }
        public virtual DbSet<tblFeeCalculate_temp> tblFeeCalculate_temp { get; set; }
        public virtual DbSet<tblDestination> tblDestination { get; set; }
        public virtual DbSet<tblFeeConcession> tblFeeConcession { get; set; }
        public virtual DbSet<TariffDetail> TariffDetail { get; set; }
        public virtual DbSet<StudentFee> StudentFee { get; set; }
        public virtual DbSet<StudentConcession> StudentConcession { get; set; }
        public virtual DbSet<stdfee1> stdfee1 { get; set; }
        public virtual DbSet<AppointmentDiary> AppointmentDiaries { get; set; }
        public virtual DbSet<tblBatch> tblBatches { get; set; }
        public virtual DbSet<payment_details> payment_details { get; set; }
        public virtual DbSet<migpsGpsTrackingSys> migpsGpsTrackingSys { get; set; }
        public virtual DbSet<UserPermissions> UserPermissions { get; set; }
        public virtual DbSet<UserPreferences> UserPreferences { get; set; }
        public virtual DbSet<UserRoles> UserRoles { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VersionInfo> VersionInfo { get; set; }
        public virtual DbSet<Attendance> Attendance { get; set; }
        public virtual DbSet<Companies> Companies { get; set; }
        public virtual DbSet<DailyClosing> DailyClosing { get; set; }
        public virtual DbSet<DamagedProducts> DamagedProducts { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Exceptions> Exceptions { get; set; }
        public virtual DbSet<GoodsIssueDetails> GoodsIssueDetails { get; set; }
        public virtual DbSet<GoodsReceipt> GoodsReceipt { get; set; }
        public virtual DbSet<GoodsReceiptDetails> GoodsReceiptDetails { get; set; }
        public virtual DbSet<Languages> Languages { get; set; }
        public virtual DbSet<PurchaseDetails> PurchaseDetails { get; set; }
        public virtual DbSet<QuotationDetails> QuotationDetails { get; set; }
        public virtual DbSet<Quotations> Quotations { get; set; }
        public virtual DbSet<RolePermissions> RolePermissions { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<SaleDetails> SaleDetails { get; set; }
        public virtual DbSet<Sales> Sales { get; set; }
        public virtual DbSet<ServiceInvoiceDetails> ServiceInvoiceDetails { get; set; }
        public virtual DbSet<ServiceInvoices> ServiceInvoices { get; set; }
        public virtual DbSet<Warehouses> Warehouses { get; set; }
        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<Banks> Banks { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<CustomerGroups> CustomerGroups { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Regions> Regions { get; set; }
        public virtual DbSet<Shippers> Shippers { get; set; }
        public virtual DbSet<SupplierGroups> SupplierGroups { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<Territories> Territories { get; set; }
        public virtual DbSet<Units> Units { get; set; }
        public virtual DbSet<Brands> Brands { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Services> Services { get; set; }
        public virtual DbSet<ExpenseTypes> ExpenseTypes { get; set; }
        public virtual DbSet<Transactions> Transactions { get; set; }
        public virtual DbSet<Purchases> Purchases { get; set; }
        public virtual DbSet<Expenses> Expenses { get; set; }
        public virtual DbSet<TempDebit> TempDebit { get; set; }
        public virtual DbSet<TempCredit> TempCredit { get; set; }
        public virtual DbSet<PaymentCustomer> PaymentCustomer { get; set; }
        public virtual DbSet<SupplierPayment> SupplierPayment { get; set; }
        public virtual DbSet<GoodsIssue> GoodsIssue { get; set; }
        public virtual DbSet<tblClassTimingDet> tblClassTimingDets { get; set; }
        public virtual DbSet<tblStudentFee1> tblStudentFee1 { get; set; }
        public virtual DbSet<ZommDetail> ZommDetail { get; set; }
        public virtual DbSet<tblElearning> tblElearning { get; set; }
    
        public virtual int SalarySlipGenerate(Nullable<long> id, Nullable<long> gradeId, Nullable<long> employeeId, string month)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("gradeId", gradeId) :
                new ObjectParameter("gradeId", typeof(long));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(long));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalarySlipGenerate", idParameter, gradeIdParameter, employeeIdParameter, monthParameter);
        }
    
        public virtual ObjectResult<Sp_checkLeaveYearforEmployee_Result> Sp_checkLeaveYearforEmployee(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<long> leaveType, Nullable<long> desig, Nullable<int> schoolID)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType.HasValue ?
                new ObjectParameter("leaveType", leaveType) :
                new ObjectParameter("leaveType", typeof(long));
    
            var desigParameter = desig.HasValue ?
                new ObjectParameter("desig", desig) :
                new ObjectParameter("desig", typeof(long));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_checkLeaveYearforEmployee_Result>("Sp_checkLeaveYearforEmployee", startdateParameter, enddateParameter, leaveTypeParameter, desigParameter, schoolIDParameter);
        }
    
        public virtual int sp_fetchEmployeeTakeAssgnLeave(string desgId, Nullable<long> empId, Nullable<long> leaveType, Nullable<long> school)
        {
            var desgIdParameter = desgId != null ?
                new ObjectParameter("desgId", desgId) :
                new ObjectParameter("desgId", typeof(string));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(long));
    
            var leaveTypeParameter = leaveType.HasValue ?
                new ObjectParameter("leaveType", leaveType) :
                new ObjectParameter("leaveType", typeof(long));
    
            var schoolParameter = school.HasValue ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_fetchEmployeeTakeAssgnLeave", desgIdParameter, empIdParameter, leaveTypeParameter, schoolParameter);
        }
    
        public virtual ObjectResult<sp_getAllEmployeeDetails_Result> sp_getAllEmployeeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllEmployeeDetails_Result>("sp_getAllEmployeeDetails");
        }
    
        public virtual ObjectResult<sp_getAllEmployeeDetailsForAttendence_Result> sp_getAllEmployeeDetailsForAttendence(string school)
        {
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllEmployeeDetailsForAttendence_Result>("sp_getAllEmployeeDetailsForAttendence", schoolParameter);
        }
    
        public virtual ObjectResult<sp_getAllEmployeeDetailsReports_Result> sp_getAllEmployeeDetailsReports(string school)
        {
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getAllEmployeeDetailsReports_Result>("sp_getAllEmployeeDetailsReports", schoolParameter);
        }
    
        public virtual ObjectResult<sp_GetStudentDet_Result> sp_GetStudentDet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentDet_Result>("sp_GetStudentDet", idParameter);
        }
    
        public virtual ObjectResult<sp_getStudentDetails_Result> sp_getStudentDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getStudentDetails_Result>("sp_getStudentDetails");
        }
    
        public virtual ObjectResult<sp_getStudentDetailsReports_Result> sp_getStudentDetailsReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getStudentDetailsReports_Result>("sp_getStudentDetailsReports");
        }
    
        public virtual int sp_searchClassTeacherReport(string @class, string section, string teacherName, string school)
        {
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            var sectionParameter = section != null ?
                new ObjectParameter("section", section) :
                new ObjectParameter("section", typeof(string));
    
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("teacherName", teacherName) :
                new ObjectParameter("teacherName", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchClassTeacherReport", classParameter, sectionParameter, teacherNameParameter, schoolParameter);
        }
    
        public virtual int sp_searchEmployeeAttendenceForFilter(string empcode, string empName, string department, string designation, string staff, string school)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("designation", designation) :
                new ObjectParameter("designation", typeof(string));
    
            var staffParameter = staff != null ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchEmployeeAttendenceForFilter", empcodeParameter, empNameParameter, departmentParameter, designationParameter, staffParameter, schoolParameter);
        }
    
        public virtual int sp_searchEmployeeForAttendence(string empcode, string empName, string department, string designation, string staff, string school)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("designation", designation) :
                new ObjectParameter("designation", typeof(string));
    
            var staffParameter = staff != null ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchEmployeeForAttendence", empcodeParameter, empNameParameter, departmentParameter, designationParameter, staffParameter, schoolParameter);
        }
    
        public virtual int sp_searchEmployeeForLeaveRequest(string empcode, string empName, string startdate, string enddate, string status, string schoolID)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchEmployeeForLeaveRequest", empcodeParameter, empNameParameter, startdateParameter, enddateParameter, statusParameter, schoolIDParameter);
        }
    
        public virtual int sp_searchEmployeeForLeaveRequestReport(string empcode, string empName, string startdate, string enddate, string status, string dept, string desg, string staff, string leaveType, string school)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("dept", dept) :
                new ObjectParameter("dept", typeof(string));
    
            var desgParameter = desg != null ?
                new ObjectParameter("desg", desg) :
                new ObjectParameter("desg", typeof(string));
    
            var staffParameter = staff != null ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(string));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("leaveType", leaveType) :
                new ObjectParameter("leaveType", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchEmployeeForLeaveRequestReport", empcodeParameter, empNameParameter, startdateParameter, enddateParameter, statusParameter, deptParameter, desgParameter, staffParameter, leaveTypeParameter, schoolParameter);
        }
    
        public virtual int sp_searchEmployeeForSms(string empcode, string empName, string department, string designation, string staff, string school)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("designation", designation) :
                new ObjectParameter("designation", typeof(string));
    
            var staffParameter = staff != null ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchEmployeeForSms", empcodeParameter, empNameParameter, departmentParameter, designationParameter, staffParameter, schoolParameter);
        }
    
        public virtual int sp_searchEmployeeReporting(string empcode, string empName, string school, string department, string designation, string staff, string status)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("designation", designation) :
                new ObjectParameter("designation", typeof(string));
    
            var staffParameter = staff != null ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchEmployeeReporting", empcodeParameter, empNameParameter, schoolParameter, departmentParameter, designationParameter, staffParameter, statusParameter);
        }
    
        public virtual int sp_searchEmployeeSalryDetails(string empcode, string empName, string startdate, string enddate, string designation, string school)
        {
            var empcodeParameter = empcode != null ?
                new ObjectParameter("empcode", empcode) :
                new ObjectParameter("empcode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("designation", designation) :
                new ObjectParameter("designation", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchEmployeeSalryDetails", empcodeParameter, empNameParameter, startdateParameter, enddateParameter, designationParameter, schoolParameter);
        }
    
        public virtual int Sp_GettingSchoolDetail_Update(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GettingSchoolDetail_Update", iDParameter);
        }
    
        public virtual int sp_searchExpensePaymentDetails(string name, string date, string paymentMode, string schoolID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("paymentMode", paymentMode) :
                new ObjectParameter("paymentMode", typeof(string));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchExpensePaymentDetails", nameParameter, dateParameter, paymentModeParameter, schoolIDParameter);
        }
    
        public virtual int sp_searchStudentattendenceReports(string regcode, string stuname, string section, string @class, string school)
        {
            var regcodeParameter = regcode != null ?
                new ObjectParameter("regcode", regcode) :
                new ObjectParameter("regcode", typeof(string));
    
            var stunameParameter = stuname != null ?
                new ObjectParameter("stuname", stuname) :
                new ObjectParameter("stuname", typeof(string));
    
            var sectionParameter = section != null ?
                new ObjectParameter("section", section) :
                new ObjectParameter("section", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchStudentattendenceReports", regcodeParameter, stunameParameter, sectionParameter, classParameter, schoolParameter);
        }
    
        public virtual int sp_searchStudentForAttendence(string regNo, string studentName, Nullable<System.DateTime> attendenceDate, string empId, string schoolID)
        {
            var regNoParameter = regNo != null ?
                new ObjectParameter("regNo", regNo) :
                new ObjectParameter("regNo", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("studentName", studentName) :
                new ObjectParameter("studentName", typeof(string));
    
            var attendenceDateParameter = attendenceDate.HasValue ?
                new ObjectParameter("attendenceDate", attendenceDate) :
                new ObjectParameter("attendenceDate", typeof(System.DateTime));
    
            var empIdParameter = empId != null ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(string));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchStudentForAttendence", regNoParameter, studentNameParameter, attendenceDateParameter, empIdParameter, schoolIDParameter);
        }
    
        public virtual int sp_searchStudentReporting(string studentcode, string stdname, string @class, string section, string rollno, string status, string school)
        {
            var studentcodeParameter = studentcode != null ?
                new ObjectParameter("studentcode", studentcode) :
                new ObjectParameter("studentcode", typeof(string));
    
            var stdnameParameter = stdname != null ?
                new ObjectParameter("stdname", stdname) :
                new ObjectParameter("stdname", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            var sectionParameter = section != null ?
                new ObjectParameter("section", section) :
                new ObjectParameter("section", typeof(string));
    
            var rollnoParameter = rollno != null ?
                new ObjectParameter("rollno", rollno) :
                new ObjectParameter("rollno", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("School", school) :
                new ObjectParameter("School", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_searchStudentReporting", studentcodeParameter, stdnameParameter, classParameter, sectionParameter, rollnoParameter, statusParameter, schoolParameter);
        }
    
        public virtual int ImportEmployeeExcelData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportEmployeeExcelData");
        }
    
        public virtual int sp_ImportEmployeeDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImportEmployeeDetails");
        }
    
        public virtual int sp_ImportStudentDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImportStudentDetails");
        }
    
        public virtual int sp_ImportStudentImportExcelData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImportStudentImportExcelData");
        }
    
        public virtual ObjectResult<string> fee_concession(Nullable<int> academicYearid, Nullable<int> studentid, Nullable<int> sectionID, Nullable<int> persentate, string remarks, ObjectParameter new_identity)
        {
            var academicYearidParameter = academicYearid.HasValue ?
                new ObjectParameter("AcademicYearid", academicYearid) :
                new ObjectParameter("AcademicYearid", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var persentateParameter = persentate.HasValue ?
                new ObjectParameter("persentate", persentate) :
                new ObjectParameter("persentate", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("fee_concession", academicYearidParameter, studentidParameter, sectionIDParameter, persentateParameter, remarksParameter, new_identity);
        }
    
        public virtual ObjectResult<string> fee_concession1(Nullable<int> academicYearid, Nullable<int> studentid, Nullable<int> sectionID, Nullable<int> persentate, string remarks, ObjectParameter new_identity)
        {
            var academicYearidParameter = academicYearid.HasValue ?
                new ObjectParameter("AcademicYearid", academicYearid) :
                new ObjectParameter("AcademicYearid", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var persentateParameter = persentate.HasValue ?
                new ObjectParameter("persentate", persentate) :
                new ObjectParameter("persentate", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("fee_concession1", academicYearidParameter, studentidParameter, sectionIDParameter, persentateParameter, remarksParameter, new_identity);
        }
    
        public virtual int pro_feereceipt(Nullable<int> cID, Nullable<int> studentid, Nullable<System.DateTime> dated, Nullable<int> transTypeid, string narration, Nullable<int> amount, Nullable<int> userid, string feeType, string admNo, string student, string fInitial, string father, Nullable<int> instituteID, Nullable<int> courseID, Nullable<int> seatID, Nullable<int> roomTypeID, Nullable<int> routeID, Nullable<byte> sYear, Nullable<int> sem, Nullable<int> batchID, string remarks, string manualno, string str, string str1, Nullable<int> dRAgainst, Nullable<int> cRAgainst, string f, ObjectParameter new_identity)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var datedParameter = dated.HasValue ?
                new ObjectParameter("Dated", dated) :
                new ObjectParameter("Dated", typeof(System.DateTime));
    
            var transTypeidParameter = transTypeid.HasValue ?
                new ObjectParameter("TransTypeid", transTypeid) :
                new ObjectParameter("TransTypeid", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var feeTypeParameter = feeType != null ?
                new ObjectParameter("FeeType", feeType) :
                new ObjectParameter("FeeType", typeof(string));
    
            var admNoParameter = admNo != null ?
                new ObjectParameter("AdmNo", admNo) :
                new ObjectParameter("AdmNo", typeof(string));
    
            var studentParameter = student != null ?
                new ObjectParameter("Student", student) :
                new ObjectParameter("Student", typeof(string));
    
            var fInitialParameter = fInitial != null ?
                new ObjectParameter("FInitial", fInitial) :
                new ObjectParameter("FInitial", typeof(string));
    
            var fatherParameter = father != null ?
                new ObjectParameter("Father", father) :
                new ObjectParameter("Father", typeof(string));
    
            var instituteIDParameter = instituteID.HasValue ?
                new ObjectParameter("InstituteID", instituteID) :
                new ObjectParameter("InstituteID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var seatIDParameter = seatID.HasValue ?
                new ObjectParameter("SeatID", seatID) :
                new ObjectParameter("SeatID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var sYearParameter = sYear.HasValue ?
                new ObjectParameter("SYear", sYear) :
                new ObjectParameter("SYear", typeof(byte));
    
            var semParameter = sem.HasValue ?
                new ObjectParameter("sem", sem) :
                new ObjectParameter("sem", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var manualnoParameter = manualno != null ?
                new ObjectParameter("manualno", manualno) :
                new ObjectParameter("manualno", typeof(string));
    
            var strParameter = str != null ?
                new ObjectParameter("Str", str) :
                new ObjectParameter("Str", typeof(string));
    
            var str1Parameter = str1 != null ?
                new ObjectParameter("Str1", str1) :
                new ObjectParameter("Str1", typeof(string));
    
            var dRAgainstParameter = dRAgainst.HasValue ?
                new ObjectParameter("DRAgainst", dRAgainst) :
                new ObjectParameter("DRAgainst", typeof(int));
    
            var cRAgainstParameter = cRAgainst.HasValue ?
                new ObjectParameter("CRAgainst", cRAgainst) :
                new ObjectParameter("CRAgainst", typeof(int));
    
            var fParameter = f != null ?
                new ObjectParameter("f", f) :
                new ObjectParameter("f", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pro_feereceipt", cIDParameter, studentidParameter, datedParameter, transTypeidParameter, narrationParameter, amountParameter, useridParameter, feeTypeParameter, admNoParameter, studentParameter, fInitialParameter, fatherParameter, instituteIDParameter, courseIDParameter, seatIDParameter, roomTypeIDParameter, routeIDParameter, sYearParameter, semParameter, batchIDParameter, remarksParameter, manualnoParameter, strParameter, str1Parameter, dRAgainstParameter, cRAgainstParameter, fParameter, new_identity);
        }
    
        public virtual ObjectResult<Sp_checkLeaveYearforEmployee_Result> fee(Nullable<int> cID, Nullable<int> studentid, Nullable<System.DateTime> dated, Nullable<int> transTypeid, string narration, Nullable<int> amount, Nullable<int> userid, string feeType, string admNo, string student, string fInitial, string father, Nullable<int> instituteID, Nullable<int> courseID, Nullable<int> seatID, Nullable<int> roomTypeID, Nullable<int> routeID, Nullable<byte> sYear, Nullable<int> sem, Nullable<int> batchID, string remarks, string manualno, string str, string str1, Nullable<int> dRAgainst, Nullable<int> cRAgainst, string f, ObjectParameter new_identity)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("Studentid", studentid) :
                new ObjectParameter("Studentid", typeof(int));
    
            var datedParameter = dated.HasValue ?
                new ObjectParameter("Dated", dated) :
                new ObjectParameter("Dated", typeof(System.DateTime));
    
            var transTypeidParameter = transTypeid.HasValue ?
                new ObjectParameter("TransTypeid", transTypeid) :
                new ObjectParameter("TransTypeid", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var feeTypeParameter = feeType != null ?
                new ObjectParameter("FeeType", feeType) :
                new ObjectParameter("FeeType", typeof(string));
    
            var admNoParameter = admNo != null ?
                new ObjectParameter("AdmNo", admNo) :
                new ObjectParameter("AdmNo", typeof(string));
    
            var studentParameter = student != null ?
                new ObjectParameter("Student", student) :
                new ObjectParameter("Student", typeof(string));
    
            var fInitialParameter = fInitial != null ?
                new ObjectParameter("FInitial", fInitial) :
                new ObjectParameter("FInitial", typeof(string));
    
            var fatherParameter = father != null ?
                new ObjectParameter("Father", father) :
                new ObjectParameter("Father", typeof(string));
    
            var instituteIDParameter = instituteID.HasValue ?
                new ObjectParameter("InstituteID", instituteID) :
                new ObjectParameter("InstituteID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            var seatIDParameter = seatID.HasValue ?
                new ObjectParameter("SeatID", seatID) :
                new ObjectParameter("SeatID", typeof(int));
    
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var routeIDParameter = routeID.HasValue ?
                new ObjectParameter("RouteID", routeID) :
                new ObjectParameter("RouteID", typeof(int));
    
            var sYearParameter = sYear.HasValue ?
                new ObjectParameter("SYear", sYear) :
                new ObjectParameter("SYear", typeof(byte));
    
            var semParameter = sem.HasValue ?
                new ObjectParameter("sem", sem) :
                new ObjectParameter("sem", typeof(int));
    
            var batchIDParameter = batchID.HasValue ?
                new ObjectParameter("BatchID", batchID) :
                new ObjectParameter("BatchID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var manualnoParameter = manualno != null ?
                new ObjectParameter("manualno", manualno) :
                new ObjectParameter("manualno", typeof(string));
    
            var strParameter = str != null ?
                new ObjectParameter("Str", str) :
                new ObjectParameter("Str", typeof(string));
    
            var str1Parameter = str1 != null ?
                new ObjectParameter("Str1", str1) :
                new ObjectParameter("Str1", typeof(string));
    
            var dRAgainstParameter = dRAgainst.HasValue ?
                new ObjectParameter("DRAgainst", dRAgainst) :
                new ObjectParameter("DRAgainst", typeof(int));
    
            var cRAgainstParameter = cRAgainst.HasValue ?
                new ObjectParameter("CRAgainst", cRAgainst) :
                new ObjectParameter("CRAgainst", typeof(int));
    
            var fParameter = f != null ?
                new ObjectParameter("f", f) :
                new ObjectParameter("f", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_checkLeaveYearforEmployee_Result>("fee", cIDParameter, studentidParameter, datedParameter, transTypeidParameter, narrationParameter, amountParameter, useridParameter, feeTypeParameter, admNoParameter, studentParameter, fInitialParameter, fatherParameter, instituteIDParameter, courseIDParameter, seatIDParameter, roomTypeIDParameter, routeIDParameter, sYearParameter, semParameter, batchIDParameter, remarksParameter, manualnoParameter, strParameter, str1Parameter, dRAgainstParameter, cRAgainstParameter, fParameter, new_identity);
        }
    
        [DbFunction("SCHOOLERPEntities", "udf_getsfee1")]
        public virtual IQueryable<udf_getsfee1_Result> udf_getsfee1(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<udf_getsfee1_Result>("[SCHOOLERPEntities].[udf_getsfee1](@SchoolID)", schoolIDParameter);
        }
    }
}
